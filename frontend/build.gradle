version '1.0.0-SNAPSHOT'

buildscript {
    repositories {
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap/' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.26"
    }
}

apply plugin: 'kotlin2js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'org.jetbrains.kotlin.frontend'

repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-js-wrappers' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile("org.jetbrains.kotlinx:kotlinx-html-js:$html_version")
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.21.2'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:0.21.2'

    compile ("org.jetbrains:kotlin-react:16.0.0-pre.5-kotlin-1.1.51")
    compile ("org.jetbrains:kotlin-react-dom:16.0.0-pre.5-kotlin-1.1.51")
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}


kotlinFrontend {
    sourceMaps = false

    npm {
        dependency("react")
        dependency("react-dom")
        dependency("react-router")
        dependency("jquery")
        dependency("react-markdown")

        //dependency("react-scripts-kotlin")

        devDependency("kotlin-webpack-plugin")
        devDependency("postcss-loader")
        devDependency("extract-text-webpack-plugin")
        devDependency("debug-webpack-plugin")
        devDependency("json-loader")
        devDependency("url-loader")
        devDependency("file-loader")
        devDependency("css-loader")
        devDependency("style-loader")
        devDependency("babel-loader")
        devDependency("babel-core")
        devDependency("karma")
    }

    webpackBundle {
        bundleName = "main"
        sourceMapEnabled = true
        contentPath = file("build/bundle") // a file that represents a directory to be served by dev server)
        publicPath = "/"  // web prefix
        port = 8088   // dev server port
        //proxyUrl = "http://localhost:9090"
        stats = "errors-only"  // log level
    }
}


compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.outputFile = "$project.buildDir.path/js/${project.name}.js"
    kotlinOptions.sourceMap = true
    kotlinOptions.moduleKind = 'commonjs'
    kotlinOptions.main = "call"
}


sourceSets {
    main {
        kotlin.srcDirs += "src"
        resources.srcDirs += "resources"
        resources.srcDirs += "src"
        output.resourcesDir = "build/js/resources"
    }
    test {
        kotlin.srcDirs += "test"
        resources.srcDirs += "testResources"
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}
