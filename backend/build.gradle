version = '0.0.1-SNAPSHOT'

buildscript {
    repositories {
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlin_version}")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: "kotlin-spring"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'



repositories {
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}")
    compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}") // necessary otherwise we receive an additional 1.1.61 transitive dependency...
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-reactor:${coroutines_version}")
    compile("org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}")
    compile("org.springframework.boot:spring-boot-devtools:${spring_boot_version}")
    compile("org.springframework.boot:spring-boot-starter-webflux:${spring_boot_version}")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile project(":common-jvm")
    testCompile('org.springframework.boot:spring-boot-starter-test')

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.jetbrains.kotlin:kotlin-test-junit")
    testCompile("io.projectreactor:reactor-test")
    testCompile "junit:junit:4.12"
    testCompile "com.willowtreeapps.assertk:assertk:0.9"
    testCompile "org.mockito:mockito-core:2.13.0"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

bootRun {
    // support passing -Dsystem.property=value to bootRun task
    systemProperties = System.properties
}
